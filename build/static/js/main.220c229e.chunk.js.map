{"version":3,"sources":["ChartArea.js","ChartVerticalBar.js","ChartLine.js","Chart.js","LoadingSpinner.js","App.js","serviceWorker.js","index.js"],"names":["ChartArea","react_default","a","createElement","es","key","xType","height","this","props","width","opacity","data","stroke","strokeStyle","Component","ChartVerticalBar","tickPadding","ChartLine","Chart","type","src_ChartArea","src_ChartVerticalBar","src_ChartLine","className","renderChart","LoadingSpinner","loading","Spinner","animation","variant","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","charts","id","label","series","observationStart","selectedChart","isLoading","handleRadioChange","bind","assertThisInitialized","chart","getChart","setChartData","seriesId","frequency","setState","fetch","concat","then","response","status","json","observations","map","observation","x","Date","date","getTime","y","parseFloat","value","console","warn","chartData","length","Promise","all","_ref","asyncToGenerator","regenerator_default","mark","_callee3","serie","index","wrap","_context3","prev","next","_this2","fetchFredSeries","sent","stop","_x5","_x6","apply","arguments","computeDGS10T10YIEChartData","chartIndex","findIndex","c","DGS10","forEach","dataGroup1","T10YIE","dataGroup2","push","chartId","find","_this3","currentTarget","_ref2","_this4","_this$state","Container","Row","Col","xs","src_LoadingSpinner","src_Chart","getChartData","getChartType","Form","Label","Check","inline","toString","onChange","checked","name","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8VA4BeA,mLAbX,MAAO,CACLC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,IAAK,QAASC,MAAM,OAAOC,OAAQC,KAAKC,MAAMF,OAAQG,MAAOF,KAAKC,MAAMC,OAC9ET,EAAAC,EAAAC,cAACC,EAAA,EAAD,MACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,MACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,MACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,MACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYO,QAAS,GAAKC,KAAMJ,KAAKC,MAAMG,OAC3CX,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAgBQ,KAAMJ,KAAKC,MAAMG,KAAMC,OAAO,UAAUC,YAAY,mBATpDC,aCaTC,mLAZX,MAAO,CACLf,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,IAAK,QAASC,MAAM,OAAOC,OAAQC,KAAKC,MAAMF,OAAQG,MAAOF,KAAKC,MAAMC,OAC9ET,EAAAC,EAAAC,cAACC,EAAA,EAAD,MACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOa,YAAa,IACpBhB,EAAAC,EAAAC,cAACC,EAAA,EAAD,MACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,MACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAmBQ,KAAMJ,KAAKC,MAAMG,gBARbG,aCchBG,mLAZX,MAAO,CACLjB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,IAAK,QAASC,MAAM,OAAOC,OAAQC,KAAKC,MAAMF,OAAQG,MAAOF,KAAKC,MAAMC,OAC9ET,EAAAC,EAAAC,cAACC,EAAA,EAAD,MACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,MACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,MACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,MACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAgBQ,KAAMJ,KAAKC,MAAMG,KAAMC,OAAO,UAAUC,YAAY,mBARpDC,aCmBTI,wLArBX,OADaX,KAAKC,MAAMW,MAEtB,IAAK,OACH,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,CAAWT,KAAMJ,KAAKC,MAAMG,KAAML,OAAQC,KAAKC,MAAMF,OAAQG,MAAOF,KAAKC,MAAMC,QACxF,IAAK,eACH,OAAOT,EAAAC,EAAAC,cAACmB,EAAD,CAAkBV,KAAMJ,KAAKC,MAAMG,KAAML,OAAQC,KAAKC,MAAMF,OAAQG,MAAOF,KAAKC,MAAMC,QAC/F,IAAK,OACH,OAAOT,EAAAC,EAAAC,cAACoB,EAAD,CAAWX,KAAMJ,KAAKC,MAAMG,KAAML,OAAQC,KAAKC,MAAMF,OAAQG,MAAOF,KAAKC,MAAMC,QACxF,QACE,OAAO,uCAKX,OACET,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,iCACZhB,KAAKiB,sBAnBMV,qBCYLW,mLAbX,OAAKlB,KAAKC,MAAMkB,QAKd1B,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,mEACbvB,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAASC,UAAU,SAASC,QAAQ,SACpC7B,EAAAC,EAAAC,cAAA,6BANK,YAHgBY,aCqKdgB,cAhKb,SAAAA,EAAYtB,GAAO,IAAAuB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAzB,KAAAuB,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAzB,KAAAyB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA7B,KAAMC,KACD6B,MAAQ,CACX1B,KAAM,GACN2B,OAAQ,CAAC,CACPC,GAAI,SACJC,MAAO,SACPC,OAAQ,CAAC,UACTtB,KAAM,OACNuB,iBAAkB,GAClB/B,KAAM,IACL,CACD4B,GAAI,QACJC,MAAO,QACPC,OAAQ,CAAC,SACTtB,KAAM,eACNuB,iBAAkB,aAClB/B,KAAM,IACL,CACD4B,GAAI,cACJC,MAAO,qBACPC,OAAQ,CAAC,QAAS,UAClBtB,KAAM,OACNuB,iBAAkB,GAClB/B,KAAM,KAGRgC,cAAe,SACfC,WAAW,GAGbb,EAAKc,kBAAoBd,EAAKc,kBAAkBC,KAAvBd,OAAAe,EAAA,EAAAf,CAAAD,IA/BRA,iMAmCXiB,EAAQzC,KAAK0C,SAAS1C,KAAK8B,MAAMM,eACvCpC,KAAK2C,aAAaF,qLAGEG,EAAUC,EAAWV,gFACzCnC,KAAK8C,SAAS,CAAET,WAAW,aACRU,MAAK,2CAAAC,OAA4CJ,EAA5C,eAAAI,OAAkEH,EAAlE,uBAAAG,OAAiGb,EAAjG,6DAA6Kc,KACnM,SAACC,GACC,GAAwB,MAApBA,EAASC,OAIb,OAAOD,EAASE,OAAOH,KAAK,SAAC7C,GAS3B,OAPeA,EAAKiD,aAAaC,IAAI,SAACC,GAIpC,MAAO,CAAEC,EAFL,IAAIC,KAAKF,EAAYG,MAAMC,UAEnBC,EADZC,WAAWN,EAAYO,OAAaD,WAAWN,EAAYO,OAAa,OAR1EC,QAAQC,KAAR,gDAAAhB,OAA6DE,EAASC,yBAHtE/C,2BAmBCA,uLAGUqC,uFACbwB,EAAY,GAEXxB,EAAMrC,KAAK8D,wCAERC,QAAQC,IAAI3B,EAAMP,OAAOoB,IAAb,eAAAe,EAAA5C,OAAA6C,EAAA,EAAA7C,CAAA8C,EAAA7E,EAAA8E,KAAiB,SAAAC,EAAOC,EAAOC,GAAd,IAAAvE,EAAA,OAAAmE,EAAA7E,EAAAkF,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACdC,EAAKC,gBAAgBP,EAAO,IAAKjC,EAAMN,kBADzB,OAC3B/B,EAD2ByE,EAAAK,KAEjCzC,EAAMP,OAAOgC,OAAS,EAAID,EAAUS,GAAStE,EAAO6D,EAAY7D,EAF/B,wBAAAyE,EAAAM,SAAAV,MAAjB,gBAAAW,EAAAC,GAAA,OAAAhB,EAAAiB,MAAAtF,KAAAuF,YAAA,YAKD,gBAAb9C,EAAMT,KACRiC,EAAYjE,KAAKwF,4BAA4BvB,IAGzCwB,EAAazF,KAAK8B,MAAMC,OAAO2D,UAAU,SAAAC,GAAC,OAAIA,EAAE3D,KAAOS,EAAMT,MAC7DD,cAAa/B,KAAK8B,MAAMC,SACvB0D,GAAYrF,KAAO6D,EAC1BjE,KAAK8C,SAAS,CAAEf,WAChB/B,KAAK8C,SAAS,CAAET,WAAW,4JAIHjC,GAC1B,IAAM6D,EAAY,GAUlB,OATA7D,EAAKwF,MAAMC,QAAQ,SAACC,GAClB1F,EAAK2F,OAAOF,QAAQ,SAACG,GAEnB,GAAIF,EAAWtC,IAAMwC,EAAWxC,EAAG,CACjC,IAAMI,EAAIkC,EAAWlC,EAAIoC,EAAWpC,EACpCK,EAAUgC,KAAK,CAAEzC,EAAGsC,EAAWtC,EAAGI,WAIjCK,mCAGAiC,GAEP,OADmBlG,KAAK8B,MAAhBC,OACMoE,KAAK,SAAC1D,GAAD,OAAWA,EAAMT,KAAOkE,yCAIhCA,GACX,OAAOlG,KAAK8B,MAAMC,OAAOoE,KAAK,SAAC1D,GAAD,OAAWA,EAAMT,KAAOkE,IAAStF,0CAGpDsF,GACX,OAAOlG,KAAK8B,MAAMC,OAAOoE,KAAK,SAAC1D,GAAD,OAAWA,EAAMT,KAAOkE,IAAS9F,kDAI5B,IAAAgG,EAAApG,KAAjBqG,EAAiBC,EAAjBD,cAElBrG,KAAK8C,SAAS,CAAEV,cAAeiE,EAAcvC,OAAS,WACpD,IAAMrB,EAAQ2D,EAAK1D,SAAS2D,EAAcvC,OAC1CsC,EAAKzD,aAAaF,sCAKb,IAAA8D,EAAAvG,KAAAwG,EACsCxG,KAAK8B,MAA1CO,EADDmE,EACCnE,UAAWD,EADZoE,EACYpE,cAAeL,EAD3ByE,EAC2BzE,OAClC,OACEtC,EAAAC,EAAAC,cAAC8G,EAAA,EAAD,KACEhH,EAAAC,EAAAC,cAAC+G,EAAA,EAAD,KACEjH,EAAAC,EAAAC,cAACgH,EAAA,EAAD,CAAKC,GAAI,IACPnH,EAAAC,EAAAC,cAAA,MAAIqB,UAAU,eAAd,iBACAvB,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,aACbvB,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,kBACbvB,EAAAC,EAAAC,cAACkH,EAAD,CAAgB1F,QAASkB,KACvBA,GACA5C,EAAAC,EAAAC,cAACmH,EAAD,CAAO1G,KAAMJ,KAAK+G,aAAa3E,GAAgBrC,OAAQ,IAAKG,MAAO,IAAMU,KAAMZ,KAAKgH,aAAa5E,MAGrG3C,EAAAC,EAAAC,cAACsH,EAAA,EAAD,CAAMjG,UAAU,2DACdvB,EAAAC,EAAAC,cAACsH,EAAA,EAAKC,MAAN,CAAYlG,UAAU,aAAYvB,EAAAC,EAAAC,cAAA,2BACjCoC,EAAOuB,IAAI,SAACb,GACX,OAAOhD,EAAAC,EAAAC,cAACsH,EAAA,EAAKE,MAAN,CAAYC,QAAM,EACvBvH,IAAK4C,EAAMR,MAAMoF,WACjBC,SAAUf,EAAKjE,kBACfiF,QAASnF,IAAkBK,EAAMT,GACjCwF,KAAK,cACL5G,KAAM,QACNqB,MAAOQ,EAAMR,MACbD,GAAIS,EAAMT,GACV8B,MAAOrB,EAAMT,mBArJfzB,aCKEkH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtI,EAAAC,EAAAC,cAACqI,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpF,KAAK,SAAAqF,GACjCA,EAAaC","file":"static/js/main.220c229e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../node_modules/react-vis/dist/style.css';\nimport {\n  XYPlot,\n  AreaSeries,\n  XAxis,\n  YAxis,\n  VerticalGridLines,\n  HorizontalGridLines,\n  LineMarkSeries,\n} from 'react-vis';\n\n\nclass ChartArea extends Component {\n  render() {\n    return [\n      <XYPlot key={'chart'} xType=\"time\" height={this.props.height} width={this.props.width}>\n        <XAxis />\n        <YAxis />\n        <VerticalGridLines />\n        <HorizontalGridLines />\n        <AreaSeries opacity={0.3} data={this.props.data} />\n        <LineMarkSeries data={this.props.data} stroke=\"#12939a\" strokeStyle=\"solid\" />\n      </XYPlot>\n    ];\n  }\n}\n\nexport default ChartArea;\n","import React, { Component } from 'react';\nimport '../node_modules/react-vis/dist/style.css';\nimport {\n  XYPlot,\n  VerticalBarSeries,\n  XAxis,\n  YAxis,\n  VerticalGridLines,\n  HorizontalGridLines,\n} from 'react-vis';\n\n\nclass ChartVerticalBar extends Component {\n  render() {\n    return [\n      <XYPlot key={'chart'} xType=\"time\" height={this.props.height} width={this.props.width}>\n        <XAxis />\n        <YAxis tickPadding={0} />\n        <VerticalGridLines />\n        <HorizontalGridLines />\n        <VerticalBarSeries data={this.props.data} />\n      </XYPlot>\n    ];\n  }\n}\n\nexport default ChartVerticalBar;\n","import React, { Component } from 'react';\nimport '../node_modules/react-vis/dist/style.css';\nimport {\n  XYPlot,\n  LineMarkSeries,\n  XAxis,\n  YAxis,\n  VerticalGridLines,\n  HorizontalGridLines,\n} from 'react-vis';\n\n\nclass ChartLine extends Component {\n  render() {\n    return [\n      <XYPlot key={'chart'} xType=\"time\" height={this.props.height} width={this.props.width}>\n        <XAxis />\n        <YAxis />\n        <VerticalGridLines />\n        <HorizontalGridLines />\n        <LineMarkSeries data={this.props.data} stroke=\"#12939a\" strokeStyle=\"solid\" />\n      </XYPlot>\n    ];\n  }\n}\n\nexport default ChartLine;\n","import React, { Component } from 'react';\nimport '../node_modules/react-vis/dist/style.css';\nimport ChartArea from './ChartArea';\nimport ChartVerticalBar from './ChartVerticalBar'\nimport ChartLine from './ChartLine'\n\nclass Chart extends Component {\n\n  renderChart() {\n    const type = this.props.type;\n    switch (type) {\n      case 'area':\n        return <ChartArea data={this.props.data} height={this.props.height} width={this.props.width} />\n      case 'verticalBars':\n        return <ChartVerticalBar data={this.props.data} height={this.props.height} width={this.props.width} />\n      case 'line':\n        return <ChartLine data={this.props.data} height={this.props.height} width={this.props.width} />\n      default:\n        return null;\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"d-flex justify-content-center\">\n        {this.renderChart()}\n      </div>\n    );\n  }\n}\n\nexport default Chart;\n","import React, { Component } from 'react';\nimport { Spinner } from 'react-bootstrap'\n\nclass LoadingSpinner extends Component {\n  render() {\n    if (!this.props.loading) {\n      return null;\n    }\n\n    return (\n      <div className=\"align-self-center mx-auto d-flex flex-column align-items-center\">\n        <Spinner animation=\"border\" variant=\"info\" />\n        <small>Loading ...</small>\n      </div>\n    );\n  }\n}\n\nexport default LoadingSpinner;\n","import React, { Component } from 'react';\nimport './App.css';\nimport '../node_modules/react-vis/dist/style.css';\nimport { Form, Container, Row, Col } from 'react-bootstrap'\nimport Chart from './Chart'\nimport LoadingSpinner from './LoadingSpinner'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      charts: [{\n        id: 'T10Y2Y',\n        label: 'T10Y2Y',\n        series: ['T10Y2Y'],\n        type: 'area',\n        observationStart: '',\n        data: [],\n      }, {\n        id: 'GDPCA',\n        label: 'GDPCA',\n        series: ['GDPCA'],\n        type: 'verticalBars',\n        observationStart: '1999-01-01',\n        data: [],\n      }, {\n        id: 'DGS10T10YIE',\n        label: 'DGS10 minus T10YIE',\n        series: ['DGS10', 'T10YIE'],\n        type: 'line',\n        observationStart: '',\n        data: [],\n      },\n      ],\n      selectedChart: 'T10Y2Y',\n      isLoading: false,\n    };\n\n    this.handleRadioChange = this.handleRadioChange.bind(this);\n  }\n\n  async componentDidMount() {\n    const chart = this.getChart(this.state.selectedChart);\n    this.setChartData(chart);\n  }\n\n  async fetchFredSeries(seriesId, frequency, observationStart) {\n    this.setState({ isLoading: true });\n    const data = await fetch(`/api/fred/series/observations?series_id=${seriesId}&frequency=${frequency}&observation_start=${observationStart}&api_key=ac95f4955bcea62d846c5eea3adbddee&file_type=json`).then(\n      (response) => {\n        if (response.status !== 200) {\n          console.warn(`Looks like there was a problem. Status Code: ${response.status}`);\n          return;\n        }\n        return response.json().then((data) => {\n          let formatedData = [];\n          formatedData = data.observations.map((observation) => {\n            let x, y;\n            x = new Date(observation.date).getTime();\n            parseFloat(observation.value) ? y = parseFloat(observation.value) : y = 0;\n            return { x, y };\n          })\n\n          return formatedData;\n        });\n      }\n    )\n    return data;\n  }\n\n  async setChartData(chart) {\n    let chartData = {};\n    // fetchapi only if data has not been fetched yet\n    if (!chart.data.length) {\n      // fetch all the series needed for the chart\n      await Promise.all(chart.series.map(async (serie, index) => {\n        const data = await this.fetchFredSeries(serie, 'a', chart.observationStart);\n        chart.series.length > 1 ? chartData[serie] = data : chartData = data;\n      }));\n\n      if (chart.id === 'DGS10T10YIE') {\n        chartData = this.computeDGS10T10YIEChartData(chartData);\n      }\n\n      const chartIndex = this.state.charts.findIndex(c => c.id === chart.id);\n      const charts = [...this.state.charts] // important to create a copy, otherwise you'll modify state outside of setState call\n      charts[chartIndex].data = chartData;\n      this.setState({ charts });\n      this.setState({ isLoading: false });\n    }\n  }\n\n  computeDGS10T10YIEChartData(data) {\n    const chartData = [];\n    data.DGS10.forEach((dataGroup1) => {\n      data.T10YIE.forEach((dataGroup2) => {\n        //if same date the calculation makes sense\n        if (dataGroup1.x === dataGroup2.x) {\n          const y = dataGroup1.y - dataGroup2.y;\n          chartData.push({ x: dataGroup1.x, y })\n        }\n      });\n    });\n    return chartData;\n  }\n\n  getChart(chartId) {\n    const { charts } = this.state;\n    return charts.find((chart) => chart.id === chartId);\n  }\n\n\n  getChartType(chartId) {\n    return this.state.charts.find((chart) => chart.id === chartId).type;\n  }\n\n  getChartData(chartId) {\n    return this.state.charts.find((chart) => chart.id === chartId).data;\n  }\n\n\n  handleRadioChange({ currentTarget }) {\n    //setState is async, so use cb function. \n    this.setState({ selectedChart: currentTarget.value }, () => {\n      const chart = this.getChart(currentTarget.value);\n      this.setChartData(chart);\n    });\n  }\n\n\n  render() {\n    const { isLoading, selectedChart, charts } = this.state;\n    return (\n      <Container>\n        <Row>\n          <Col xs={12}>\n            <h1 className=\"text-center\">G42 Challenge</h1>\n            <div className=\"jumbotron\">\n              <div className=\"wrapper d-flex\">\n                <LoadingSpinner loading={isLoading} />\n                {!isLoading &&\n                  <Chart data={this.getChartData(selectedChart)} height={400} width={1000} type={this.getChartType(selectedChart)} />\n                }\n              </div>\n              <Form className=\"d-flex center align-items-center justify-content-center\">\n                <Form.Label className=\"mb-0 mr-1\"><strong>Series :</strong></Form.Label>\n                {charts.map((chart) => {\n                  return <Form.Check inline\n                    key={chart.label.toString()}\n                    onChange={this.handleRadioChange}\n                    checked={selectedChart === chart.id}\n                    name=\"seriesRadio\"\n                    type={'radio'}\n                    label={chart.label}\n                    id={chart.id}\n                    value={chart.id}\n                  />\n                })}\n              </Form>\n            </div>\n          </Col>\n        </Row >\n      </Container >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}